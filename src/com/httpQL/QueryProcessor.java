
// line 1 "parser/com/httpQL/QueryProcessor.rl"
package com.httpQL;

import java.util.List;
import java.util.LinkedList;

import com.httpQL.ConditionType;
import com.httpQL.IQueryDB;
import com.httpQL.Query.QueryBuilder;
import com.httpQL.QueryCondition;
import com.httpQL.Utils;

public class QueryProcessor {
	
	
// line 86 "parser/com/httpQL/QueryProcessor.rl"


	
// line 22 "parser/com/httpQL/QueryProcessor.java"
private static byte[] init__QueryParser_actions_0()
{
	return new byte [] {
	    0,    1,    0,    1,    1,    1,    2,    1,    3,    1,    4,    1,
	    5,    1,    6,    1,    7,    1,    8,    1,    9,    1,   10,    1,
	   11,    1,   12,    1,   13,    1,   14,    1,   16,    2,    0,    4,
	    2,    0,    6,    2,    0,    9,    2,    7,    8,    2,    8,   10,
	    2,   11,   15,    2,   11,   17,    2,   12,   15,    2,   12,   17,
	    2,   14,   15
	};
}

private static final byte _QueryParser_actions[] = init__QueryParser_actions_0();


private static short[] init__QueryParser_key_offsets_0()
{
	return new short [] {
	    0,    0,    6,    8,   10,   12,   14,   16,   17,   20,   23,   26,
	   28,   30,   32,   33,   36,   39,   41,   43,   45,   47,   48,   54,
	   60,   64,   67,   69,   75,   82,   85,   87,   89,   92,   99,  104,
	  116,  129,  135,  142,  150,  158,  166,  174,  180,  187,  192,  193,
	  195,  201,  208,  216,  222,  235,  249,  256,  264,  272,  280,  286,
	  299,  313,  328,  342,  357,  371,  377,  382,  384,  390,  396,  399,
	  410,  422,  426,  439,  451,  457,  460,  471,  483,  496,  508,  514,
	  516,  518,  520,  522,  524,  526,  528,  530,  532,  534,  535,  538,
	  541,  544,  546,  548,  549,  555,  561,  565,  568,  570,  576,  583,
	  584,  589,  591,  593,  595,  597,  599,  601,  602,  608,  614,  618,
	  621,  623,  629,  636,  639,  646,  651,  663,  676,  683,  691,  699,
	  707,  715,  721,  728,  733,  734,  736,  742,  749,  757,  763,  776,
	  790,  798,  806,  814,  820,  833,  847,  862,  876,  891,  905,  911,
	  916,  918,  924,  930,  933,  944,  956,  969,  981,  987,  990, 1001,
	 1013, 1026, 1038, 1044, 1047, 1054, 1059, 1071, 1084, 1090, 1098, 1105,
	 1113, 1121, 1129, 1137, 1143, 1150, 1155, 1156, 1158, 1164, 1171, 1172,
	 1180, 1186, 1199, 1213, 1220, 1229, 1237, 1245, 1253, 1259, 1272, 1286,
	 1293, 1308, 1322, 1335, 1350, 1364, 1377, 1383, 1388, 1390, 1396, 1402,
	 1405, 1416, 1428, 1433, 1439, 1452, 1464, 1475, 1481, 1484, 1495, 1507,
	 1512, 1525, 1537, 1548, 1554, 1557, 1558, 1564, 1565, 1572, 1579, 1592,
	 1605, 1610, 1621, 1626, 1637, 1637, 1643, 1643, 1650, 1657, 1670, 1683,
	 1688, 1699, 1704
	};
}

private static final short _QueryParser_key_offsets[] = init__QueryParser_key_offsets_0();


private static char[] init__QueryParser_trans_keys_0()
{
	return new char [] {
	   68,   83,   85,  100,  115,  117,   69,  101,   76,  108,   69,  101,
	   84,  116,   69,  101,   32,   32,    9,   13,   32,    9,   13,   32,
	   70,  102,   82,  114,   79,  111,   77,  109,   32,   32,    9,   13,
	   32,   87,  119,   72,  104,   69,  101,   82,  114,   69,  101,   32,
	   32,   61,   76,  108,    9,   13,   32,   60,   61,   62,    9,   13,
	   32,   60,   61,   62,   32,   34,   61,   32,   34,   48,   57,   65,
	   90,   97,  122,   34,   48,   57,   65,   90,   97,  122,   32,   65,
	   97,   78,  110,   68,  100,   32,   34,   61,   32,   34,   60,   61,
	   62,    9,   13,   32,   34,   60,   61,   62,   32,   60,   61,   62,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,   60,   61,
	   62,    9,   13,   48,   57,   65,   90,   97,  122,   32,   60,   61,
	   62,   65,   97,   32,   34,   60,   61,   62,    9,   13,   32,   60,
	   61,   62,   73,  105,    9,   13,   32,   60,   61,   62,   77,  109,
	    9,   13,   32,   60,   61,   62,   73,  105,    9,   13,   32,   60,
	   61,   62,   84,  116,    9,   13,   32,   60,   61,   62,    9,   13,
	   32,   60,   61,   62,   98,    9,   13,   32,   60,   61,   62,   98,
	  121,   32,   34,   48,   57,   65,   90,   97,  122,   34,   48,   57,
	   65,   90,   97,  122,   32,   34,   60,   61,   62,   98,    9,   13,
	   32,   34,   60,   61,   62,   98,   32,   60,   61,   62,   98,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   34,   60,   61,   62,
	   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,   60,   61,
	   62,   65,   97,   98,   32,   34,   60,   61,   62,   98,    9,   13,
	   32,   60,   61,   62,   98,  121,    9,   13,   32,   34,   60,   61,
	   62,   98,    9,   13,   32,   34,   60,   61,   62,   98,   32,   60,
	   61,   62,   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   34,   60,   61,   62,   98,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   34,   60,   61,   62,   98,  121,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   34,   60,   61,   62,   98,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   34,   60,   61,   62,   98,
	  121,    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,   60,
	   61,   62,   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   60,   61,   62,    9,   13,   32,   61,   98,    9,   13,   32,   98,
	   32,   61,   98,  121,    9,   13,   32,   34,   61,   98,    9,   13,
	   32,   34,   98,   32,   61,   98,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   34,   61,   98,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   65,   97,   98,   32,   34,   61,   98,  121,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   34,   61,   98,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   34,   61,   98,    9,
	   13,   32,   34,   98,   32,   61,   98,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   34,   61,   98,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   34,   61,   98,  121,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   34,   61,   98,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   34,   61,   98,    9,   13,   69,  101,
	   76,  108,   69,  101,   67,   99,   84,  116,   80,  112,   68,  100,
	   65,   97,   84,  116,   69,  101,   32,   32,    9,   13,   32,    9,
	   13,   32,   83,  115,   69,  101,   84,  116,   32,   32,   61,   76,
	  108,    9,   13,   32,   60,   61,   62,    9,   13,   32,   60,   61,
	   62,   32,   34,   61,   32,   34,   48,   57,   65,   90,   97,  122,
	   34,   48,   57,   65,   90,   97,  122,   32,   32,   65,   87,   97,
	  119,   78,  110,   68,  100,   72,  104,   69,  101,   82,  114,   69,
	  101,   32,   32,   61,   76,  108,    9,   13,   32,   60,   61,   62,
	    9,   13,   32,   60,   61,   62,   32,   34,   61,   32,   34,   48,
	   57,   65,   90,   97,  122,   34,   48,   57,   65,   90,   97,  122,
	   32,   34,   61,   32,   34,   60,   61,   62,    9,   13,   32,   34,
	   60,   61,   62,   32,   60,   61,   62,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   34,   60,   61,   62,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   34,   60,   61,   62,    9,   13,   32,
	   60,   61,   62,   73,  105,    9,   13,   32,   60,   61,   62,   77,
	  109,    9,   13,   32,   60,   61,   62,   73,  105,    9,   13,   32,
	   60,   61,   62,   84,  116,    9,   13,   32,   60,   61,   62,    9,
	   13,   32,   60,   61,   62,   98,    9,   13,   32,   60,   61,   62,
	   98,  121,   32,   34,   48,   57,   65,   90,   97,  122,   34,   48,
	   57,   65,   90,   97,  122,   32,   34,   60,   61,   62,   98,    9,
	   13,   32,   34,   60,   61,   62,   98,   32,   60,   61,   62,   98,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,   60,   61,
	   62,   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,
	   60,   61,   62,   98,    9,   13,   32,   60,   61,   62,   98,  121,
	    9,   13,   32,   34,   60,   61,   62,   98,    9,   13,   32,   34,
	   60,   61,   62,   98,   32,   60,   61,   62,   98,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   34,   60,   61,   62,   98,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   34,   60,   61,   62,
	   98,  121,    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,
	   60,   61,   62,   98,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   34,   60,   61,   62,   98,  121,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   34,   60,   61,   62,   98,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   60,   61,   62,    9,   13,   32,
	   61,   98,    9,   13,   32,   98,   32,   61,   98,  121,    9,   13,
	   32,   34,   61,   98,    9,   13,   32,   34,   98,   32,   61,   98,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,   61,   98,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,   61,   98,
	  121,    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,   61,
	   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,   34,   61,
	   98,    9,   13,   32,   34,   98,   32,   61,   98,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   34,   61,   98,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   34,   61,   98,  121,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   34,   61,   98,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   34,   61,   98,    9,   13,
	   32,   34,   61,   32,   34,   60,   61,   62,    9,   13,   32,   34,
	   60,   61,   62,   32,   60,   61,   62,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   34,   60,   61,   62,    9,   13,   48,   57,
	   65,   90,   97,  122,   32,   60,   61,   62,    9,   13,   32,   60,
	   61,   62,   65,   87,   97,  119,   32,   34,   60,   61,   62,    9,
	   13,   32,   60,   61,   62,   73,  105,    9,   13,   32,   60,   61,
	   62,   77,  109,    9,   13,   32,   60,   61,   62,   73,  105,    9,
	   13,   32,   60,   61,   62,   84,  116,    9,   13,   32,   60,   61,
	   62,    9,   13,   32,   60,   61,   62,   98,    9,   13,   32,   60,
	   61,   62,   98,  121,   32,   34,   48,   57,   65,   90,   97,  122,
	   34,   48,   57,   65,   90,   97,  122,   32,   32,   34,   60,   61,
	   62,   98,    9,   13,   32,   34,   60,   61,   62,   98,   32,   60,
	   61,   62,   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   34,   60,   61,   62,   98,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   60,   61,   62,   98,    9,   13,   32,   60,   61,   62,
	   65,   87,   97,   98,  119,   32,   34,   60,   61,   62,   98,    9,
	   13,   32,   60,   61,   62,   98,  121,    9,   13,   32,   34,   60,
	   61,   62,   98,    9,   13,   32,   34,   60,   61,   62,   98,   32,
	   60,   61,   62,   98,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   34,   60,   61,   62,   98,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   60,   61,   62,   98,    9,   13,   32,   34,   60,
	   61,   62,   98,  121,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   34,   60,   61,   62,   98,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   60,   61,   62,   98,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   34,   60,   61,   62,   98,  121,    9,   13,
	   48,   57,   65,   90,   97,  122,   32,   34,   60,   61,   62,   98,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   60,   61,   62,
	   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,   60,   61,
	   62,    9,   13,   32,   61,   98,    9,   13,   32,   98,   32,   61,
	   98,  121,    9,   13,   32,   34,   61,   98,    9,   13,   32,   34,
	   98,   32,   61,   98,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   34,   61,   98,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   61,   98,    9,   13,   32,   65,   87,   97,   98,  119,   32,
	   34,   61,   98,  121,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   34,   61,   98,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   61,   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,
	   34,   61,   98,    9,   13,   32,   34,   98,   32,   61,   98,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   34,   61,   98,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   61,   98,    9,   13,
	   32,   34,   61,   98,  121,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   34,   61,   98,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   61,   98,    9,   13,   48,   57,   65,   90,   97,  122,
	   32,   34,   61,   98,    9,   13,   32,    9,   13,   32,   32,   60,
	   61,   62,    9,   13,   32,   32,   60,   61,   62,   98,    9,   13,
	   32,   60,   61,   62,   98,    9,   13,   32,   60,   61,   62,   98,
	    9,   13,   48,   57,   65,   90,   97,  122,   32,   60,   61,   62,
	   98,    9,   13,   48,   57,   65,   90,   97,  122,   32,   61,   98,
	    9,   13,   32,   61,   98,    9,   13,   48,   57,   65,   90,   97,
	  122,   32,   61,   98,    9,   13,   32,   61,   98,    9,   13,   48,
	   57,   65,   90,   97,  122,   32,   60,   61,   62,    9,   13,   32,
	   60,   61,   62,   98,    9,   13,   32,   60,   61,   62,   98,    9,
	   13,   32,   60,   61,   62,   98,    9,   13,   48,   57,   65,   90,
	   97,  122,   32,   60,   61,   62,   98,    9,   13,   48,   57,   65,
	   90,   97,  122,   32,   61,   98,    9,   13,   32,   61,   98,    9,
	   13,   48,   57,   65,   90,   97,  122,   32,   61,   98,    9,   13,
	   32,   61,   98,    9,   13,   48,   57,   65,   90,   97,  122,    0
	};
}

private static final char _QueryParser_trans_keys[] = init__QueryParser_trans_keys_0();


private static byte[] init__QueryParser_single_lengths_0()
{
	return new byte [] {
	    0,    6,    2,    2,    2,    2,    2,    1,    1,    1,    3,    2,
	    2,    2,    1,    1,    3,    2,    2,    2,    2,    1,    4,    4,
	    4,    3,    2,    0,    1,    3,    2,    2,    3,    5,    5,    4,
	    5,    6,    5,    6,    6,    6,    6,    4,    5,    5,    1,    2,
	    0,    1,    6,    6,    5,    6,    7,    6,    6,    6,    6,    5,
	    6,    7,    6,    7,    6,    4,    3,    2,    4,    4,    3,    3,
	    4,    4,    5,    4,    4,    3,    3,    4,    5,    4,    4,    2,
	    2,    2,    2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
	    3,    2,    2,    1,    4,    4,    4,    3,    2,    0,    1,    1,
	    5,    2,    2,    2,    2,    2,    2,    1,    4,    4,    4,    3,
	    2,    0,    1,    3,    5,    5,    4,    5,    5,    6,    6,    6,
	    6,    4,    5,    5,    1,    2,    0,    1,    6,    6,    5,    6,
	    6,    6,    6,    6,    5,    6,    7,    6,    7,    6,    4,    3,
	    2,    4,    4,    3,    3,    4,    5,    4,    4,    3,    3,    4,
	    5,    4,    4,    3,    5,    5,    4,    5,    4,    8,    5,    6,
	    6,    6,    6,    4,    5,    5,    1,    2,    0,    1,    1,    6,
	    6,    5,    6,    5,    9,    6,    6,    6,    6,    5,    6,    5,
	    7,    6,    5,    7,    6,    5,    4,    3,    2,    4,    4,    3,
	    3,    4,    3,    6,    5,    4,    3,    4,    3,    3,    4,    3,
	    5,    4,    3,    4,    1,    1,    4,    1,    5,    5,    5,    5,
	    3,    3,    3,    3,    0,    4,    0,    5,    5,    5,    5,    3,
	    3,    3,    3
	};
}

private static final byte _QueryParser_single_lengths[] = init__QueryParser_single_lengths_0();


private static byte[] init__QueryParser_range_lengths_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    0,    0,
	    0,    0,    0,    1,    0,    0,    0,    0,    0,    0,    1,    1,
	    0,    0,    0,    3,    3,    0,    0,    0,    0,    1,    0,    4,
	    4,    0,    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,
	    3,    3,    1,    0,    4,    4,    0,    1,    1,    1,    0,    4,
	    4,    4,    4,    4,    4,    1,    1,    0,    1,    1,    0,    4,
	    4,    0,    4,    4,    1,    0,    4,    4,    4,    4,    1,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
	    0,    0,    0,    0,    1,    1,    0,    0,    0,    3,    3,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    1,    1,    0,    0,
	    0,    3,    3,    0,    1,    0,    4,    4,    1,    1,    1,    1,
	    1,    1,    1,    0,    0,    0,    3,    3,    1,    0,    4,    4,
	    1,    1,    1,    0,    4,    4,    4,    4,    4,    4,    1,    1,
	    0,    1,    1,    0,    4,    4,    4,    4,    1,    0,    4,    4,
	    4,    4,    1,    0,    1,    0,    4,    4,    1,    0,    1,    1,
	    1,    1,    1,    1,    1,    0,    0,    0,    3,    3,    0,    1,
	    0,    4,    4,    1,    0,    1,    1,    1,    0,    4,    4,    1,
	    4,    4,    4,    4,    4,    4,    1,    1,    0,    1,    1,    0,
	    4,    4,    1,    0,    4,    4,    4,    1,    0,    4,    4,    1,
	    4,    4,    4,    1,    1,    0,    1,    0,    1,    1,    4,    4,
	    1,    4,    1,    4,    0,    1,    0,    1,    1,    4,    4,    1,
	    4,    1,    4
	};
}

private static final byte _QueryParser_range_lengths[] = init__QueryParser_range_lengths_0();


private static short[] init__QueryParser_index_offsets_0()
{
	return new short [] {
	    0,    0,    7,   10,   13,   16,   19,   22,   24,   27,   30,   34,
	   37,   40,   43,   45,   48,   52,   55,   58,   61,   64,   66,   72,
	   78,   83,   87,   90,   94,   99,  103,  106,  109,  113,  120,  126,
	  135,  145,  152,  159,  167,  175,  183,  191,  197,  204,  210,  212,
	  215,  219,  224,  232,  239,  249,  260,  268,  276,  284,  292,  299,
	  309,  320,  332,  343,  355,  366,  372,  377,  380,  386,  392,  396,
	  404,  413,  418,  428,  437,  443,  447,  455,  464,  474,  483,  489,
	  492,  495,  498,  501,  504,  507,  510,  513,  516,  519,  521,  524,
	  527,  531,  534,  537,  539,  545,  551,  556,  560,  563,  567,  572,
	  574,  580,  583,  586,  589,  592,  595,  598,  600,  606,  612,  617,
	  621,  624,  628,  633,  637,  644,  650,  659,  669,  676,  684,  692,
	  700,  708,  714,  721,  727,  729,  732,  736,  741,  749,  756,  766,
	  777,  785,  793,  801,  808,  818,  829,  841,  852,  864,  875,  881,
	  886,  889,  895,  901,  905,  913,  922,  932,  941,  947,  951,  959,
	  968,  978,  987,  993,  997, 1004, 1010, 1019, 1029, 1035, 1044, 1051,
	 1059, 1067, 1075, 1083, 1089, 1096, 1102, 1104, 1107, 1111, 1116, 1118,
	 1126, 1133, 1143, 1154, 1161, 1171, 1179, 1187, 1195, 1202, 1212, 1223,
	 1230, 1242, 1253, 1263, 1275, 1286, 1296, 1302, 1307, 1310, 1316, 1322,
	 1326, 1334, 1343, 1348, 1355, 1365, 1374, 1382, 1388, 1392, 1400, 1409,
	 1414, 1424, 1433, 1441, 1447, 1450, 1452, 1458, 1460, 1467, 1474, 1484,
	 1494, 1499, 1507, 1512, 1520, 1521, 1527, 1528, 1535, 1542, 1552, 1562,
	 1567, 1575, 1580
	};
}

private static final short _QueryParser_index_offsets[] = init__QueryParser_index_offsets_0();


private static short[] init__QueryParser_indicies_0()
{
	return new short [] {
	    0,    2,    3,    0,    2,    3,    1,    4,    4,    1,    5,    5,
	    1,    6,    6,    1,    7,    7,    1,    8,    8,    1,    9,    1,
	    9,    1,   10,   11,    1,   10,   12,   13,   13,    1,   14,   14,
	    1,   15,   15,    1,   16,   16,    1,   17,    1,   17,    1,   18,
	   19,   20,   20,    1,   21,   21,    1,   22,   22,    1,   23,   23,
	    1,   24,   24,    1,   25,    1,   25,    1,   27,   27,    1,   26,
	   28,   29,   30,   31,    1,   26,   28,   32,   30,   33,    1,   34,
	   35,   36,    1,   34,   35,    1,   37,   37,   37,    1,   38,   37,
	   37,   37,    1,   39,   40,   40,    1,   41,   41,    1,   24,   24,
	    1,   34,   35,   42,    1,   43,   44,   29,   45,   31,    1,   26,
	   43,   35,   32,   30,   33,    1,   28,   29,   30,   31,    1,   46,
	   46,   46,   26,   28,   47,   29,   30,   31,    1,   46,   46,   46,
	   26,   48,   32,   30,   33,   40,   40,    1,   43,   44,   29,   49,
	   31,    1,   26,   28,   29,   30,   31,   50,   50,    1,   26,   28,
	   29,   30,   31,   51,   51,    1,   26,   28,   29,   30,   31,   52,
	   52,    1,   26,   28,   29,   30,   31,   53,   53,    1,   26,   55,
	   56,   30,   57,    1,   54,   58,   56,   30,   57,   59,    1,   54,
	   58,   32,   30,   33,   60,    1,   61,    1,   61,   62,    1,   63,
	   63,   63,    1,   64,   63,   63,   63,    1,   65,   66,   56,   45,
	   57,   59,    1,   54,   65,   35,   32,   30,   33,   60,    1,   58,
	   56,   30,   57,   68,    1,   67,   67,   67,   54,   58,   69,   56,
	   30,   57,   68,    1,   67,   67,   67,   54,   70,   32,   30,   33,
	   40,   40,   60,    1,   65,   66,   56,   49,   57,   59,    1,   54,
	   58,   56,   30,   57,   59,   71,    1,   54,   72,   73,   56,   30,
	   57,   59,    1,   54,   72,   62,   32,   30,   33,   60,    1,   58,
	   56,   30,   57,   75,    1,   74,   74,   74,   54,   58,   76,   56,
	   30,   57,   75,    1,   74,   74,   74,   54,   58,   76,   56,   30,
	   57,   75,   77,    1,   74,   74,   74,   54,   72,   78,   56,   30,
	   57,   75,    1,   74,   74,   74,   54,   58,   69,   56,   30,   57,
	   68,   79,    1,   67,   67,   67,   54,   72,   80,   56,   30,   57,
	   68,    1,   67,   67,   67,   54,   55,   82,   30,   83,    1,   81,
	   84,    1,   85,    1,   81,   84,   60,    1,   84,    1,   85,   86,
	    1,   81,   87,   88,    1,   85,    1,   81,   87,   62,   60,    1,
	   84,    1,   90,    1,   89,   89,   89,   81,   84,   91,    1,   90,
	    1,   89,   89,   89,   81,   92,   40,   40,   60,    1,   84,   91,
	    1,   90,   93,    1,   89,   89,   89,   81,   87,   94,    1,   90,
	    1,   89,   89,   89,   81,   95,   96,   36,   85,    1,   81,   95,
	   35,   60,    1,   84,    1,   98,    1,   97,   97,   97,   81,   84,
	   99,    1,   98,    1,   97,   97,   97,   81,   84,   99,    1,   98,
	  100,    1,   97,   97,   97,   81,   87,  101,    1,   98,    1,   97,
	   97,   97,   81,   95,   96,   42,   85,    1,   81,  102,  102,    1,
	  103,  103,    1,  104,  104,    1,  105,  105,    1,  106,  106,    1,
	  107,  107,    1,  108,  108,    1,  109,  109,    1,  110,  110,    1,
	  111,  111,    1,  112,    1,  112,    1,  113,  114,    1,  113,  115,
	  116,  116,    1,  117,  117,    1,  118,  118,    1,  119,    1,  119,
	    1,  121,  121,    1,  120,  122,  123,  124,  125,    1,  120,  122,
	  126,  124,  127,    1,  128,  129,  130,    1,  128,  129,    1,  131,
	  131,  131,    1,  132,  131,  131,  131,    1,  133,    1,  134,  135,
	  136,  135,  136,    1,  137,  137,    1,  118,  118,    1,  138,  138,
	    1,  139,  139,    1,  140,  140,    1,  141,  141,    1,  142,    1,
	  142,    1,  144,  144,    1,  143,  145,  146,  147,  148,    1,  143,
	  145,  149,  147,  150,    1,  151,  152,  153,    1,  151,  152,    1,
	  154,  154,  154,    1,  155,  154,  154,  154,    1,  151,  152,  156,
	    1,  157,  158,  146,  159,  148,    1,  143,  157,  152,  149,  147,
	  150,    1,  145,  146,  147,  148,    1,  160,  160,  160,  143,  145,
	  161,  146,  147,  148,    1,  160,  160,  160,  143,  157,  158,  146,
	  162,  148,    1,  143,  145,  146,  147,  148,  163,  163,    1,  143,
	  145,  146,  147,  148,  164,  164,    1,  143,  145,  146,  147,  148,
	  165,  165,    1,  143,  145,  146,  147,  148,  166,  166,    1,  143,
	  168,  169,  147,  170,    1,  167,  171,  169,  147,  170,  172,    1,
	  167,  171,  149,  147,  150,  173,    1,  174,    1,  174,  175,    1,
	  176,  176,  176,    1,  177,  176,  176,  176,    1,  178,  179,  169,
	  159,  170,  172,    1,  167,  178,  152,  149,  147,  150,  173,    1,
	  171,  169,  147,  170,  181,    1,  180,  180,  180,  167,  171,  182,
	  169,  147,  170,  181,    1,  180,  180,  180,  167,  178,  179,  169,
	  162,  170,  172,    1,  167,  171,  169,  147,  170,  172,  183,    1,
	  167,  184,  185,  169,  147,  170,  172,    1,  167,  184,  175,  149,
	  147,  150,  173,    1,  171,  169,  147,  170,  187,    1,  186,  186,
	  186,  167,  171,  188,  169,  147,  170,  187,    1,  186,  186,  186,
	  167,  171,  188,  169,  147,  170,  187,  189,    1,  186,  186,  186,
	  167,  184,  190,  169,  147,  170,  187,    1,  186,  186,  186,  167,
	  171,  182,  169,  147,  170,  181,  191,    1,  180,  180,  180,  167,
	  184,  192,  169,  147,  170,  181,    1,  180,  180,  180,  167,  168,
	  194,  147,  195,    1,  193,  196,    1,  197,    1,  193,  196,  173,
	    1,  196,    1,  197,  198,    1,  193,  199,  200,    1,  197,    1,
	  193,  199,  175,  173,    1,  196,    1,  202,    1,  201,  201,  201,
	  193,  196,  203,    1,  202,    1,  201,  201,  201,  193,  196,  203,
	    1,  202,  204,    1,  201,  201,  201,  193,  199,  205,    1,  202,
	    1,  201,  201,  201,  193,  206,  207,  153,  197,    1,  193,  206,
	  152,  173,    1,  196,    1,  209,    1,  208,  208,  208,  193,  196,
	  210,    1,  209,    1,  208,  208,  208,  193,  196,  210,    1,  209,
	  211,    1,  208,  208,  208,  193,  199,  212,    1,  209,    1,  208,
	  208,  208,  193,  206,  207,  156,  197,    1,  193,  128,  129,  213,
	    1,  214,  215,  123,  216,  125,    1,  120,  214,  129,  126,  124,
	  127,    1,  122,  123,  124,  125,    1,  217,  217,  217,  120,  122,
	  218,  123,  124,  125,    1,  217,  217,  217,  120,  219,  123,  124,
	  125,    1,  120,  220,  126,  124,  127,  135,  136,  135,  136,    1,
	  214,  215,  123,  221,  125,    1,  120,  122,  123,  124,  125,  222,
	  222,    1,  120,  122,  123,  124,  125,  223,  223,    1,  120,  122,
	  123,  124,  125,  224,  224,    1,  120,  122,  123,  124,  125,  225,
	  225,    1,  120,  227,  228,  124,  229,    1,  226,  230,  228,  124,
	  229,  231,    1,  226,  230,  126,  124,  127,  232,    1,  233,    1,
	  233,  234,    1,  235,  235,  235,    1,  236,  235,  235,  235,    1,
	  237,    1,  238,  239,  228,  216,  229,  231,    1,  226,  238,  129,
	  126,  124,  127,  232,    1,  230,  228,  124,  229,  241,    1,  240,
	  240,  240,  226,  230,  242,  228,  124,  229,  241,    1,  240,  240,
	  240,  226,  243,  228,  124,  229,  231,    1,  226,  244,  126,  124,
	  127,  135,  136,  135,  232,  136,    1,  238,  239,  228,  221,  229,
	  231,    1,  226,  230,  228,  124,  229,  231,  245,    1,  226,  246,
	  247,  228,  124,  229,  231,    1,  226,  246,  234,  126,  124,  127,
	  232,    1,  230,  228,  124,  229,  249,    1,  248,  248,  248,  226,
	  230,  250,  228,  124,  229,  249,    1,  248,  248,  248,  226,  251,
	  228,  124,  229,  231,    1,  226,  230,  250,  228,  124,  229,  249,
	  252,    1,  248,  248,  248,  226,  246,  253,  228,  124,  229,  249,
	    1,  248,  248,  248,  226,  251,  228,  124,  229,  249,    1,  248,
	  248,  248,  226,  230,  242,  228,  124,  229,  241,  254,    1,  240,
	  240,  240,  226,  246,  255,  228,  124,  229,  241,    1,  240,  240,
	  240,  226,  243,  228,  124,  229,  249,    1,  248,  248,  248,  226,
	  227,  257,  124,  258,    1,  256,  259,    1,  260,    1,  256,  259,
	  232,    1,  259,    1,  260,  261,    1,  256,  262,  263,    1,  260,
	    1,  256,  262,  234,  232,    1,  259,    1,  265,    1,  264,  264,
	  264,  256,  259,  266,    1,  265,    1,  264,  264,  264,  256,  267,
	    1,  260,    1,  256,  268,  135,  136,  135,  232,  136,    1,  259,
	  266,    1,  265,  269,    1,  264,  264,  264,  256,  262,  270,    1,
	  265,    1,  264,  264,  264,  256,  267,    1,  265,    1,  264,  264,
	  264,  256,  271,  272,  130,  260,    1,  256,  271,  129,  232,    1,
	  259,    1,  274,    1,  273,  273,  273,  256,  259,  275,    1,  274,
	    1,  273,  273,  273,  256,  276,    1,  260,    1,  256,  259,  275,
	    1,  274,  277,    1,  273,  273,  273,  256,  262,  278,    1,  274,
	    1,  273,  273,  273,  256,  276,    1,  265,    1,  264,  264,  264,
	  256,  271,  272,  213,  260,    1,  256,  279,    1,   18,  280,    1,
	  281,   29,   30,   31,    1,   26,  282,    1,  283,   56,   30,   57,
	   59,    1,   54,  284,   56,   30,   57,   59,    1,   54,  284,   56,
	   30,   57,   75,    1,   74,   74,   74,   54,  283,   56,   30,   57,
	   75,    1,   74,   74,   74,   54,  285,    1,   85,    1,   81,  285,
	    1,   90,    1,   89,   89,   89,   81,  286,    1,   85,    1,   81,
	  286,    1,   90,    1,   89,   89,   89,   81,    1,  145,  146,  147,
	  148,    1,  143,    1,  171,  169,  147,  170,  172,    1,  167,  171,
	  169,  147,  170,  172,    1,  167,  171,  169,  147,  170,  187,    1,
	  186,  186,  186,  167,  171,  169,  147,  170,  187,    1,  186,  186,
	  186,  167,  196,    1,  197,    1,  193,  196,    1,  202,    1,  201,
	  201,  201,  193,  196,    1,  197,    1,  193,  196,    1,  202,    1,
	  201,  201,  201,  193,    0
	};
}

private static final short _QueryParser_indicies[] = init__QueryParser_indicies_0();


private static short[] init__QueryParser_trans_targs_0()
{
	return new short [] {
	    2,    0,   83,   88,    3,    4,    5,    6,    7,    8,    9,   10,
	   10,   11,   12,   13,   14,   15,  232,   16,   17,   18,   19,   20,
	   21,   22,   23,   39,   24,   33,   26,   38,   25,   32,   26,   27,
	   26,   28,  233,   29,   30,   31,   26,   34,   35,   26,   36,  234,
	   37,   26,   40,   41,   42,   43,   44,   65,   50,   55,   45,   56,
	   46,   47,   48,   49,  235,   51,   52,   53,   63,  236,   54,   57,
	   58,   59,   60,   61,  237,   62,  238,   64,  239,   66,   76,   82,
	   67,   68,   69,   70,   71,   72,   74,  240,   73,   75,  241,   77,
	   78,   79,   80,  242,   81,  243,   84,   85,   86,   87,    7,   89,
	   90,   91,   92,   93,   94,   95,   96,   96,   97,   98,   99,  100,
	  101,  179,  102,  172,  104,  178,  103,  171,  104,  105,  104,  106,
	  107,  108,  108,  109,  111,  110,  112,  113,  114,  115,  116,  117,
	  129,  118,  124,  120,  128,  119,  123,  120,  121,  120,  122,  244,
	  120,  125,  126,  120,  127,  245,  120,  130,  131,  132,  133,  134,
	  154,  140,  144,  135,  145,  136,  137,  138,  139,  246,  141,  142,
	  143,  152,  247,  146,  147,  148,  149,  150,  248,  151,  249,  153,
	  250,  155,  164,  170,  156,  157,  158,  159,  160,  161,  162,  251,
	  163,  252,  165,  166,  167,  168,  253,  169,  254,  104,  173,  174,
	  104,  175,  176,  177,  177,  104,  180,  181,  182,  183,  184,  210,
	  191,  197,  185,  198,  186,  187,  188,  189,  190,  108,  192,  193,
	  194,  207,  195,  196,  196,  199,  200,  201,  202,  204,  203,  196,
	  205,  206,  208,  209,  211,  223,  231,  212,  213,  214,  215,  216,
	  217,  220,  218,  219,  219,  221,  222,  224,  225,  226,  228,  227,
	  219,  229,  230,   16,   29,   37,   29,   54,   54,   73,   73
	};
}

private static final short _QueryParser_trans_targs[] = init__QueryParser_trans_targs_0();


private static byte[] init__QueryParser_trans_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    5,    0,    1,   27,
	    0,    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,    0,
	    0,    0,    1,    1,    0,   36,   17,   39,   13,   19,    0,    9,
	   15,    1,    0,    0,    0,    0,   21,    0,   33,   42,    1,    1,
	    0,   45,    1,    1,    1,    1,    1,    0,   36,   39,    0,    1,
	    0,    0,    9,    1,    0,    0,   33,    1,    1,    1,    0,    1,
	    0,   33,    1,    1,    1,    1,   33,    1,   33,    1,   36,   39,
	    0,    1,    1,    0,   33,    1,    1,    1,    0,    1,   33,    0,
	   33,    1,    1,    1,    1,   33,    0,    0,    0,    0,    3,    0,
	    0,    0,    0,    7,    0,    1,   31,    0,    0,    0,    0,    0,
	    1,    1,    0,   36,   17,   39,   13,   19,    0,    9,   15,    1,
	    0,   25,    0,    0,    0,    0,    0,    0,    0,    0,    0,    1,
	    1,    0,   36,   17,   39,   13,   19,    0,    9,   15,    1,    0,
	   21,    0,   33,   42,    1,    1,   45,    1,    1,    1,    1,    1,
	    0,   36,   39,    0,    1,    0,    0,    9,    1,    0,    0,   33,
	    1,    1,    1,    1,    0,   33,    1,    1,    1,    1,   33,    1,
	   33,    1,   36,   39,    0,    1,    1,    0,   33,    1,    1,    1,
	    1,   33,    0,   33,    1,    1,    1,    1,   33,   21,    0,   33,
	   42,    1,    1,   25,    0,   45,    1,    1,    1,    1,    1,    0,
	   36,   39,    0,    1,    0,    0,    9,    1,    0,   23,    0,   33,
	    1,    1,    1,   25,    0,    1,    0,   33,    1,    1,    1,   23,
	    1,   33,    1,   33,    1,   36,   39,    0,    1,    1,    0,   33,
	    1,    1,    1,   23,    0,    1,   33,    0,   33,    1,    1,    1,
	   25,    1,   33,   29,   25,   25,   23,   25,   23,   23,   25
	};
}

private static final byte _QueryParser_trans_actions[] = init__QueryParser_trans_actions_0();


private static byte[] init__QueryParser_to_state_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   11,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,   11,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,   11,    0,
	    0,    0,    0,   11,    0,    0,    0,    0,    0,    0,    0,   11,
	    0,    0,   11,    0,    0,   11,    0,    0,    0,    0,    0,    0,
	    0,    0,   11,    0,    0,    0,   11,    0,    0,    0,    0,   11,
	    0,    0,   11,    0,    0,   11,   11,   11,   11,   11,   11,   11,
	   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
	   11,   11,   11
	};
}

private static final byte _QueryParser_to_state_actions[] = init__QueryParser_to_state_actions_0();


private static byte[] init__QueryParser_eof_actions_0()
{
	return new byte [] {
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
	    0,    0,    0,    0,   60,   54,   54,   48,   54,   48,   48,   54,
	   48,   48,   54,   54,   57,   57,   51,   57,   51,   51,   57,   51,
	   51,   57,   57
	};
}

private static final byte _QueryParser_eof_actions[] = init__QueryParser_eof_actions_0();


static final int QueryParser_start = 1;
static final int QueryParser_first_final = 232;
static final int QueryParser_error = 0;

static final int QueryParser_en_main = 1;


// line 89 "parser/com/httpQL/QueryProcessor.rl"

	
	private final IQueryDB queryDB;
	private StringBuilder builder;
	
	public QueryProcessor(IQueryDB queryDB) {
		this.queryDB = queryDB;
		Utils.turnOnVerboseMode();
	}
	
	public Integer process(String queryText) {
		Query query = parse(queryText);
		Integer result = queryDB.putQuery(query);
		
		return result;
	}
	
	private Query parse(String queryText) { 
		String tag, site, attributeName, attributeValue;
		tag = site = attributeName = attributeValue = null;
		
		QueryMethod method = null;
		ConditionType binaryOperation = null;
		builder = new StringBuilder();
		List<QueryCondition> attributes = new LinkedList<>();
		
		int cs;

		char[] data = queryText.toCharArray();
				
		int p = 0,
			pe = data.length,
			eof = pe;
		
		
		Utils.debugMsg("-------------------------------");
		Utils.debugMsg("=" + queryText  +"=");
		Utils.debugMsg("-------------------------------");
		
		
// line 632 "parser/com/httpQL/QueryProcessor.java"
	{
	cs = QueryParser_start;
	}

// line 129 "parser/com/httpQL/QueryProcessor.rl"
		
// line 639 "parser/com/httpQL/QueryProcessor.java"
	{
	int _klen;
	int _trans = 0;
	int _acts;
	int _nacts;
	int _keys;
	int _goto_targ = 0;

	_goto: while (true) {
	switch ( _goto_targ ) {
	case 0:
	if ( p == pe ) {
		_goto_targ = 4;
		continue _goto;
	}
	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
case 1:
	_match: do {
	_keys = _QueryParser_key_offsets[cs];
	_trans = _QueryParser_index_offsets[cs];
	_klen = _QueryParser_single_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + _klen - 1;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( data[p] < _QueryParser_trans_keys[_mid] )
				_upper = _mid - 1;
			else if ( data[p] > _QueryParser_trans_keys[_mid] )
				_lower = _mid + 1;
			else {
				_trans += (_mid - _keys);
				break _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _QueryParser_range_lengths[cs];
	if ( _klen > 0 ) {
		int _lower = _keys;
		int _mid;
		int _upper = _keys + (_klen<<1) - 2;
		while (true) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( data[p] < _QueryParser_trans_keys[_mid] )
				_upper = _mid - 2;
			else if ( data[p] > _QueryParser_trans_keys[_mid+1] )
				_lower = _mid + 2;
			else {
				_trans += ((_mid - _keys)>>1);
				break _match;
			}
		}
		_trans += _klen;
	}
	} while (false);

	_trans = _QueryParser_indicies[_trans];
	cs = _QueryParser_trans_targs[_trans];

	if ( _QueryParser_trans_actions[_trans] != 0 ) {
		_acts = _QueryParser_trans_actions[_trans];
		_nacts = (int) _QueryParser_actions[_acts++];
		while ( _nacts-- > 0 )
	{
			switch ( _QueryParser_actions[_acts++] )
			{
	case 0:
// line 17 "parser/com/httpQL/QueryProcessor.rl"
	{
			builder.append(data[p]);
		}
	break;
	case 1:
// line 23 "parser/com/httpQL/QueryProcessor.rl"
	{method = QueryMethod.SELECT;}
	break;
	case 2:
// line 24 "parser/com/httpQL/QueryProcessor.rl"
	{method = QueryMethod.DELETE;}
	break;
	case 3:
// line 26 "parser/com/httpQL/QueryProcessor.rl"
	{method = QueryMethod.UPDATE;}
	break;
	case 4:
// line 34 "parser/com/httpQL/QueryProcessor.rl"
	{
					attributeName = toStringAndClean();
				}
	break;
	case 6:
// line 42 "parser/com/httpQL/QueryProcessor.rl"
	{binaryOperation = ConditionType.LT; }
	break;
	case 7:
// line 43 "parser/com/httpQL/QueryProcessor.rl"
	{binaryOperation = ConditionType.LE; }
	break;
	case 8:
// line 44 "parser/com/httpQL/QueryProcessor.rl"
	{binaryOperation = ConditionType.EQ; }
	break;
	case 9:
// line 45 "parser/com/httpQL/QueryProcessor.rl"
	{binaryOperation = ConditionType.GT; }
	break;
	case 10:
// line 46 "parser/com/httpQL/QueryProcessor.rl"
	{binaryOperation = ConditionType.GE; }
	break;
	case 11:
// line 49 "parser/com/httpQL/QueryProcessor.rl"
	{
	    				QueryCondition condition = new QueryCondition(attributeName, attributeValue, ConditionType.LIMIT);
		  				attributes.add(condition);
				  }
	break;
	case 12:
// line 54 "parser/com/httpQL/QueryProcessor.rl"
	{
					  	QueryCondition condition = new QueryCondition(attributeName, attributeValue, binaryOperation);
					  	attributes.add(condition);
				  }
	break;
	case 13:
// line 69 "parser/com/httpQL/QueryProcessor.rl"
	{tag = toStringAndClean();}
	break;
	case 14:
// line 69 "parser/com/httpQL/QueryProcessor.rl"
	{site = toStringAndClean();}
	break;
	case 16:
// line 78 "parser/com/httpQL/QueryProcessor.rl"
	{site = toStringAndClean(); }
	break;
// line 789 "parser/com/httpQL/QueryProcessor.java"
			}
		}
	}

case 2:
	_acts = _QueryParser_to_state_actions[cs];
	_nacts = (int) _QueryParser_actions[_acts++];
	while ( _nacts-- > 0 ) {
		switch ( _QueryParser_actions[_acts++] ) {
	case 5:
// line 38 "parser/com/httpQL/QueryProcessor.rl"
	{
					attributeValue = toStringAndClean();
				}
	break;
// line 805 "parser/com/httpQL/QueryProcessor.java"
		}
	}

	if ( cs == 0 ) {
		_goto_targ = 5;
		continue _goto;
	}
	if ( ++p != pe ) {
		_goto_targ = 1;
		continue _goto;
	}
case 4:
	if ( p == eof )
	{
	int __acts = _QueryParser_eof_actions[cs];
	int __nacts = (int) _QueryParser_actions[__acts++];
	while ( __nacts-- > 0 ) {
		switch ( _QueryParser_actions[__acts++] ) {
	case 11:
// line 49 "parser/com/httpQL/QueryProcessor.rl"
	{
	    				QueryCondition condition = new QueryCondition(attributeName, attributeValue, ConditionType.LIMIT);
		  				attributes.add(condition);
				  }
	break;
	case 12:
// line 54 "parser/com/httpQL/QueryProcessor.rl"
	{
					  	QueryCondition condition = new QueryCondition(attributeName, attributeValue, binaryOperation);
					  	attributes.add(condition);
				  }
	break;
	case 14:
// line 69 "parser/com/httpQL/QueryProcessor.rl"
	{site = toStringAndClean();}
	break;
	case 15:
// line 70 "parser/com/httpQL/QueryProcessor.rl"
	{
					Utils.debugMsg("=================");
					Utils.debugMsg("method is " + method);
					Utils.debugMsg("tag is " + tag);
					Utils.debugMsg("site is " + site);
					Utils.debugMsg("=================");
				}
	break;
	case 17:
// line 79 "parser/com/httpQL/QueryProcessor.rl"
	{
				  	Utils.debugMsg("=================");
				  	Utils.debugMsg("method is " + method);
				  	Utils.debugMsg("site is " + site);
				  	Utils.debugMsg("=================");
				}
	break;
// line 861 "parser/com/httpQL/QueryProcessor.java"
		}
	}
	}

case 5:
	}
	break; }
	}

// line 130 "parser/com/httpQL/QueryProcessor.rl"
		
		QueryBuilder result = Query.queryBuilder();
		if(cs >= QueryParser_first_final) {
			
            result.setMethod(method);
			if(method != QueryMethod.UPDATE) {
                result.setTag(tag);
			}
            result.setPage(site);

			Utils.debugMsg("Conditions");
			Utils.debugMsg("------------------");
			
			for(QueryCondition condition : attributes) {
    			result.addCondition(condition);
				Utils.debugMsg(condition.toString());
			}
			
			Utils.debugMsg("------------------");			
		}
		
		return result.build();
	}

	private String toStringAndClean(){
		String result = builder.toString();
		builder = new StringBuilder();
		
		return result;
	}
	
	
}
